
#version 450

#define BLOCK_SIZE 16

layout (local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout(std140, binding = 1) buffer outHistogram
{
   unsigned int histoBin[256];
   float cdf[256];
};

const mat3 YuvMat = mat3
(
   0.299,  0.587,  0.114,
  -0.169, -0.331,  0.499,
   0.499, -0.418, -0.0813
);

shared unsigned int sData[BLOCK_SIZE * BLOCK_SIZE];

void main()
{
  //Load and calculate into shared mem then 1 time good 1 send back to global memory
  //Load data into shared mem
  vec3 pixel = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;
  vec3 yuv = YuvMat * pixel + vec3(0.0, 128.0, 128.0);
  yuv = clamp(yuv, vec3(0.0), vec3(1.0)) * 255.0; //map to [0,255]
  atomicAdd(sData[int(yuv.x)], 1);

  memoryBarrierShared();
  barrier();

  //Add back into global memory
  histoBin[gl_LocalInvocationIndex] += sData[gl_LocalInvocationIndex];
}