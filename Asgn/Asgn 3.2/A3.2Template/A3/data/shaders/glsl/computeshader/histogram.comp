
#version 450

#define BLOCK_SIZE 16

layout (local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;

struct Histogram
{
  uint bin;
  float cdf;
};

layout(std430, binding = 2) buffer outHistogram
{
   Histogram histo[256];
};

shared uint sData[BLOCK_SIZE * BLOCK_SIZE];

void main()
{
  histo[gl_LocalInvocationIndex].bin = 0;
  histo[gl_LocalInvocationIndex].cdf = 0.0;
  sData[gl_LocalInvocationIndex] = 0;

  memoryBarrierShared();
  barrier();

  //Load and calculate into shared mem then 1 time good 1 send back to global memory
  //Load data into shared mem
  vec3 pixel = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb * 255.0;
  float yValue = pixel.r * 0.299 + pixel.g * 0.587 + pixel.b * 0.114;

  yValue = clamp(yValue, 0.0, 255.0); //map to [0,255]
  atomicAdd(sData[int(yValue)], 1);

  memoryBarrierShared();
  barrier();

  //Add back into global memory
  histo[gl_LocalInvocationIndex].bin += sData[gl_LocalInvocationIndex];  

  memoryBarrierShared();
  barrier();
}
