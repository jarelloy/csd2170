
#version 450

#define BLOCK_SIZE 256

layout (local_size_x = BLOCK_SIZE, local_size_y = 1) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;

struct Histogram
{
  uint bin;
  float cdf;
};

layout(std430, binding = 2) buffer outHistogram
{
   Histogram histo[256];
};

shared float sData[256];

void main()
{
  vec2 imgSize = vec2(imageSize(inputImage));

  sData[gl_LocalInvocationIndex] = float(histo[gl_LocalInvocationIndex].bin) / (imgSize.x * imgSize.y);

  //Using Hillis-steele parallel scan (Work inefficient as num processors match num data)
  for (uint stride = 1; stride <= gl_LocalInvocationID.x; stride *= 2)
  {
    memoryBarrierShared();
    barrier(); 

    float pdf = 0.0;
    if (gl_LocalInvocationIndex - stride >= 0)
      pdf = float(sData[gl_LocalInvocationIndex - stride]);

    memoryBarrierShared();
    barrier(); 

    sData[gl_LocalInvocationIndex] += pdf;
  }

  memoryBarrierShared();
  barrier(); 

  histo[gl_LocalInvocationIndex].cdf = sData[gl_LocalInvocationIndex];
}
