/* Start Header *****************************************************************/

/*! \file histogram.comp

  \author Derwin Yan Hong Rui 2000579

  \par h.yan@digipen.edu

  \date 6 Nov 2022

  \brief Copyright (C) 2022 DigiPen Institute of Technology.

Reproduction or disclosure of this file or its contents without the prior written consent of DigiPen Institute of Technology is prohibited. */

/* End Header *******************************************************************/

#version 450

#define BLOCK_SIZE 16

layout (local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;

struct Histogram
{
  uint bin;
  float cdf;
};

layout(std430, binding = 2) buffer outHistogram
{
   Histogram histo[256];
};

shared uint sData[BLOCK_SIZE * BLOCK_SIZE];

void main()
{
  //initialize shared memory to 0
  sData[gl_LocalInvocationIndex] = 0;

  memoryBarrierShared();
  barrier();

  //Load and calculate into shared mem then 1 time good 1 send back to global memory
  //Load data into shared mem
  vec3 pixel = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb * 255.0;
  float yValue = pixel.r * 0.299 + pixel.g * 0.587 + pixel.b * 0.114;

  yValue = clamp(yValue, 0.0, 255.0);
  atomicAdd(sData[int(yValue)], 1);

  memoryBarrierShared();
  barrier();

  //Add back into global memory
  atomicAdd(histo[gl_LocalInvocationIndex].bin, sData[gl_LocalInvocationIndex]); 
}
