/* Start Header *****************************************************************/

/*! \file cdfScan.comp

  \author Derwin Yan Hong Rui 2000579

  \par h.yan@digipen.edu

  \date 6 Nov 2022

  \brief Copyright (C) 2022 DigiPen Institute of Technology.

Reproduction or disclosure of this file or its contents without the prior written consent of DigiPen Institute of Technology is prohibited. */

/* End Header *******************************************************************/

#version 450

#define BLOCK_SIZE 256

layout (local_size_x = BLOCK_SIZE, local_size_y = 1) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;

struct Histogram
{
  uint bin;
  float cdf;
};

layout(std430, binding = 2) buffer outHistogram
{
   Histogram histo[256];
};

shared uint sData[256];

void main()
{
  vec2 imgSize = vec2(imageSize(inputImage));

  //CDF accumulates integral bin values first before doing a single floating point division for more speed
  sData[gl_LocalInvocationIndex] = histo[gl_LocalInvocationIndex].bin;

  //Using Hillis-steele parallel scan 
  //  (Work inefficient but step efficient as num processors match num data)
  for (uint stride = 1; stride <= gl_LocalInvocationID.x; stride *= 2)
  {
    memoryBarrierShared();
    barrier(); 

    uint pdf = 0;
    if (gl_LocalInvocationIndex - stride >= 0)
      pdf = sData[gl_LocalInvocationIndex - stride];

    memoryBarrierShared();
    barrier(); 

    sData[gl_LocalInvocationIndex] += pdf;
  }

  memoryBarrierShared();
  barrier(); 

  histo[gl_LocalInvocationIndex].cdf = float(sData[gl_LocalInvocationIndex]) / (imgSize.x * imgSize.y);
}
